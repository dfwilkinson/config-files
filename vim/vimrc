" vim:set foldmethod=marker:
"set modeline           " add these to ~/.vimrc if folding isn't working
"set modelines=1        " (mvim sets this to 0 for some reason (security?))
"verbose set modelines? " use this to check how/where it's set
set cryptmethod=blowfish2
set scrolloff=10        " Keep at least 10 lines above or below cursor

"********************************************************************
"       basic settings{{{
"********************************************************************
syntax on               " turn on syntax coloring
filetype plugin on      " load plugin files based on file type
set hidden              " enable hidden (loaded) buffers (allow switch without saving)
set textwidth=70        " set the maximum width of the text to be 70
set ts=2                " set tabwidth to be 2 (best for coding)
set sw=2                " set shift width (for Ctrl-t, Ctrl-d) the same as tabwidth
set expandtab           " replace tabs with spaces
set number              " enable line numbering
set ruler               " show row/column number
"set esckeys             " set this if you get "ABCD" in insert mode when using arrow keys
set nocompatible        " disable vi compatability (vim is much better)
set noerrorbells        " turn off annoying beeping
"set nohls               " don't highlight searched terms by default
set nowrap              " don't wrap long lines by default
set autoread            " automatically load files that have changed on disk
set linebreak           " when wrap is on, break more usefully
set completeopt=longest,menu,preview   " (tab) completion options
set backspace=indent,eol,start         " allow deletion of existing text, etc
set comments=sr:/*,mb:*,ex:*/          " why is this here?
set formatoptions=tcrql                " good for code?
"set formatoptions=tcrqwan             " good for text?
"set ignorecase smartcase infercase     " better searching/completion NO!!!!
set incsearch           " start searching right away
set joinspaces          " two spaces after a period
"set clipboard=unnamedplus " yank to X clipboard
set laststatus=2        " always display last status
hi StatusLine ctermfg=Cyan
set dir=~/.vimswap//,/var/tmp//,/tmp//,. " save all swp files in the same dir
set pastetoggle=<leader>v " toggle paste mode more quickly

"}}}
"********************************************************************

"********************************************************************
"       viminfo options{{{
"********************************************************************
:set viminfo=%,'50,<1000,h,n~/.vim/viminfo
"  %                    save/restore buffer list when vim run with no args
"  '50                  remember marks for last 50 files edited
"  <1000                up to 1000 lines saved per register
"  h                 restore hlsearch
"  n~/.vim/viminfo      name of viminfo file (must be last argument)
"}}}
"********************************************************************

"********************************************************************
"       window title{{{
"********************************************************************
let myAppName = "vim"
if has("gui_running")
   let myAppName = "g".myAppName
endif
" requires that $SHELL_TYPE be set by bashrc
let myShellType = system("bash -c 'echo -n $SHELL_TYPE'")
let myHost = ""
if myShellType == "ssh"
   let myHost = "@".substitute(hostname(), "\\..*", "", "")
endif
if has("win32")
   let g:myTitlePrefix = ""
else
   let g:myTitlePrefix = myAppName.myHost." "
endif
if &term == "screen"
   let myScreenName = system("bash -c 'echo -n $STY'")
   let myScreenName = substitute( myScreenName, "[^.]*.", "", "" )
   let g:myTitlePrefix = "screen[".myScreenName."] ".g:myTitlePrefix
endif
let g:myHomeDir = system("bash -c 'echo -n $HOME'")

fun SetTitle()
  "let myFilename = expand("%:p:~")  " full path
   let myFilename = expand("%:t:~")  " filename only
   if myFilename == ""
      let myFilename = "<".substitute(getcwd(), g:myHomeDir, "~", "").">"
   endif
   "let g:myTitle = g:myTitlePrefix."%n:".myFilename." %y%r%m"
   let g:myTitle = g:myTitlePrefix.myFilename." %y%r%m"
   let &titlestring = g:myTitle
endfun
autocmd BufEnter * call SetTitle()

if &term == "xterm" || &term == "vt220" || &term == "screen"
   set title
   set t_ts=]2;
   set t_fs=
endif
"}}}
"********************************************************************

"********************************************************************
"       colour in terminal{{{
"********************************************************************
if &term == "xterm" || &term == "screen"
   if has("terminfo")
      set t_Co=256
      set t_Sf=[3%p1%dm
      set t_Sb=[4%p1%dm
   else
      set t_Co=256
      set t_Sf=[3%dm
      set t_Sb=[4%dm
   endif
endif
"}}}
"********************************************************************

"********************************************************************
"       plugins{{{
"********************************************************************

" https://github.com/junegunn/vim-plug
call plug#begin('~/.vim/plugged')
" BUFFER/FILE PLUGINS
Plug 'vim-scripts/QuickBuf'
Plug 'chrisbra/Recover.vim'
Plug 'vim-scripts/a.vim'
Plug 'jlanzarotta/bufexplorer'
Plug 'ctrlpvim/ctrlp.vim'
" Testing https://sherif.io/2016/05/30/favorite-vim-plugins.html
" Plug 'mattn/ctrlp-mark'                " Doesn't work?
Plug 'sgur/ctrlp-extensions.vim'       " Not sure what this does
Plug 'tacahiroy/ctrlp-funky'           " Not tested yet
Plug 'itchyny/lightline.vim'           " Looks neat
Plug 'nathanaelkane/vim-indent-guides' " Nice!
" Plug 'liuchengxu/vim-clap'             " Requires newer vim
" Testing others
Plug 'MattesGroeger/vim-bookmarks'     " Seems cool
Plug 'inkarkat/vim-ingo-library'
Plug 'inkarkat/vim-mark'
" OTHER PLUGINS
Plug 'junegunn/goyo.vim'
Plug 'sjl/gundo.vim'
Plug 'junegunn/limelight.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-scripts/occur.vim'
Plug 'vim-syntastic/syntastic'
Plug 'majutsushi/tagbar'
Plug 'junegunn/vim-easy-align'
Plug 'easymotion/vim-easymotion'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-surround'
" THEMES
Plug 'ciaranm/inkpot'
Plug 'junegunn/seoul256.vim'
Plug 'sjl/badwolf'
Plug 'reedes/vim-colors-pencil'
call plug#end()

nmap <Leader>hh <Plug>MarkSet
xmap <Leader>hh <Plug>MarkSet
nmap <Leader>hm <Plug>MarkSet
xmap <Leader>hm <Plug>MarkSet
nmap <Leader>hr <Plug>MarkRegex
xmap <Leader>hr <Plug>MarkRegex
nmap <Leader>ht <Plug>MarkToggle
xmap <Leader>ht <Plug>MarkToggle

nmap <Leader>hc <Plug>MarkClear
nmap <Leader>h* <Plug>MarkSearchCurrentNext
nmap <Leader>h# <Plug>MarkSearchCurrentPrev
nmap <Leader>h/ <Plug>MarkSearchAnyNext
nmap <Leader>h? <Plug>MarkSearchAnyPrev

let g:mwIgnoreCase = 1

let g:lightline = { 'colorscheme': 'darcula' } " Tomorrow also good

colorscheme inkpot
"colorscheme seoul256

let g:bookmark_no_default_key_mappings = 1
nmap <Leader>mm <Plug>BookmarkToggle
nmap <Leader>mi <Plug>BookmarkAnnotate
nmap <Leader>ma <Plug>BookmarkShowAll
nmap <Leader>mj <Plug>BookmarkNext
nmap <Leader>mk <Plug>BookmarkPrev
nmap <Leader>mc <Plug>BookmarkClear
nmap <Leader>mx <Plug>BookmarkClearAll
nmap <Leader>mK <Plug>BookmarkMoveUp
nmap <Leader>mJ <Plug>BookmarkMoveDown
nmap <Leader>mg <Plug>BookmarkMoveToLine
let g:bookmark_disable_ctrlp = 1	
let g:bookmark_highlight_lines = 1
" Doesn't work?
"highlight BookmarkSign ctermbg=NONE ctermfg=160
"highlight BookmarkAnnotationSign ctermbg=NONE ctermfg=320
"highlight BookmarkLine ctermbg=194 ctermfg=NONE
"highlight BookmarkAnnotationLine ctermbg=400 ctermfg=NONE

" BUFFER/FILE PLUGINS

" *a* Switch between source files and header files quickly (.c --> .h etc).
map <Leader>a :A<CR>

" *QuickBuf* helps navigate and manipulate buffers - small and quick.
let g:qb_hotkey="<Leader>bb" " default buffer list toggle is F4, I prefer this

" *bufexplorer* BufExplorer Plugin for Vim - for when qbuf filelist doesn't fit.
noremap <script> <silent> <unique> <Leader>be :BufExplorer<CR>
noremap <script> <silent> <unique> <Leader>bs :BufExplorerHorizontalSplit<CR>
noremap <script> <silent> <unique> <Leader>bv :BufExplorerVerticalSplit<CR>

" *ctrlp* Full path fuzzy file, buffer, mru, tag, ... finder for Vim.
let g:ctrlp_map = '' " disable default mapping
let g:ctrlp_cmd = '' " disable default mapping
nnoremap <leader>pf :CtrlP<CR>
nnoremap <leader>pu :CtrlPBuffer<CR>
nnoremap <leader>pm :CtrlPMRUFiles<CR>

  " OTHER PLUGINS

" *vim-gitgutter* shows a git diff in the 'gutter'
" GitGutterLineHighlightsEnable  " Won't work, vimrc runs before plugin loaded.
" Three different ways of running a plugin command:
" autocmd VimEnter * GitGutterLineHighlightsEnable  " 1) Works.
" let g:gitgutter_highlight_lines = 1  " 2) Works but kind of a hack.
" 3) put a file in your ~/.vim/after/plugin directory if dislike VimEnter.
" In the end, not sure I want this on by default anyway :)

" *Recover* adds a diff option when Vim finds a swap file.

" *syntastic* is a syntax checking plugin for Vim.

" *vim-easy-align* A simple, easy-to-use Vim alignment plugin.
" e.g., select chunk of text ga= will center around =
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" *vim-easy-motion* Vim motion on speed!
" default mappings: <Leader><Leader>{f,F,t,T,w,W,b,B,e,E,ge,gE,j,k,n,,N}

" *gundo* is Vim plugin to visualize your Vim undo tree.
nnoremap <leader>u :GundoToggle<CR>

" *occur* Search for regexp in the current buffer or all buffers.
nnoremap <silent> <unique> <Leader>n :Moccur<CR>
nnoremap <silent> <unique> <Leader>N :StarOccur<CR>
nnoremap <silent> <unique> <Leader><C-n> :Occur<CR>

" *nerdcommenter* Comment functions so powerfulâ€”no comment necessary.
let NERDSpaceDelims=1

" *vim-surround* easily delete, change and add surroundings in pairs.
" change surroundings: cs<from><to> e.g., cs"'
" delete surroundings: ds<delimiter> e.g., ds"
" you surround: ys<motion-or-text><delimiter> e.g., ysiw<em>
"   yss operates on current line
" S in visual mode e.g., veS[ (] for no spaces)

" *tagbar* a class outline viewer for Vim.
nnoremap <silent> <unique> <Leader>tc :TagbarCurrentTag<CR>
nnoremap <silent> <unique> <Leader>tf :TagbarTogglePause<CR>
nnoremap <silent> <unique> <Leader>tg :TagbarOpenAutoClose<CR>
nnoremap <silent> <unique> <Leader>ts :TagbarShowTag<CR>
nnoremap <silent> <unique> <Leader>tt :TagbarToggle<CR>
let g:tagbar_width = 50
let g:tagbar_zoomwidth = 0
let g:tagbar_show_linenumbers = 1

" *goyo* Distraction-free writing in Vim.
"let g:goyo_width='80%'  " default: 80
" let g:goyo_height='85%' " default: 85%
" let g:goyo_linenr=1     " default: 0
nnoremap <silent> <unique> <Leader>y :Goyo<CR>

" *limelight* Hyperfocus-writing in Vim.
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" UNUSED/NEED FIXING {{{

" " TODO: try installing this again?
" " vim-airline : lean & mean statusline that's light as air
" " git clone https://github.com/bling/vim-airline ~/.vim/bundle/vim-airline # SETUP
" " # Follow instructions in plugins/airline_font_setup.txt # SETUP
" set guifont=Andale\ Mono\ for\ Powerline:h13
" let g:airline_powerline_fonts=1
" if has("gui_running")  " I find this distracting in the terminal.  TODO: toggle?
"   let g:airline#extensions#tabline#enabled = 1
" endif

" " Conque Shell : Run interactive commands inside a Vim buffer
" Plug 'vim-scripts/Conque-Shell'
" noremap <Leader>ii :ConqueTerm<Space>
" noremap <Leader>ib :ConqueTerm bash<CR>

" " MultipleSearch (highlighting only) plugin (ditching for mark.vim)
" map <Leader>s :SearchBuffer

" /UNUSED}}}

"}}}
"********************************************************************

"********************************************************************
"       mappings{{{
"********************************************************************

" custom extensions to "g<foo>" (use gc as prefix since it has no map)
" like gf but creates file if it doesn't exist
map gcf :e <cfile><CR>

" append full date, short date or time to end of line
map <Leader>da muA []"=strftime("%c")<CR>gP`u
map <Leader>dd muA []"=strftime("%h%-e-%R")<CR>gP`u
map <Leader>dt muA []"=strftime("%R")<CR>gP`u
" insert date right here
map <Leader>di i[]"=strftime("%c")<CR>gPl
" insert date on line above current
map <Leader>do muO[]"=strftime("%c")<CR>gP`u
map <Leader>ds :call SetDiff()<CR>
map <Leader>du :call UnsetDiff()<CR>
map <Leader>dw :call SetDiff()<CR>:call SetDiff()<CR>
" Timestamped CR - Probably only works in gvim (most terminals don't handle <S-CR> or <C-CR>)
inoremap <special> <S-CR> <space>[<c-r>=strftime("%h%-e-%R")<CR>]<CR> 

" change directory to that of local file
" map <Leader>cd :cd %:p:h<CR>
map <Leader>cd :cd %:h<CR>
" automatically change directory (might break plugins)
"set autochdir
"autocmd BufEnter * silent! lcd %:p:h

" Copy current file name into unnamed register
noremap <silent> <Leader>fn :let @"=expand("%")<CR>
noremap <silent> <Leader>fd :let @"=expand("%:h")<CR>
noremap <silent> <Leader>fp :let @"=expand("%:p")<CR>

" (win32 must source these explicitly in .vimrc to avoid path error)
if has("win32")
else
  source ~/.ConfigFiles/vim/functions/c.vim
  source ~/.ConfigFiles/vim/functions/colorcolumn.vim
  source ~/.ConfigFiles/vim/functions/ruby.vim
  source ~/.ConfigFiles/vim/functions/svn.vim
endif

  " with c shell script, captures output for quickfix (:cc,:cn,:cp,etc)
  "source ~/.ConfigFiles/vim/functions/c.vim
  command! C call CViewErrors(0) " Command to display only errors
  command! Ca call CViewErrors(1) " Command to display both errors and warnings
  command! Cx cfile /dev/null | cw

  " toggle colored right border after textwidth chars
  "source ~/.ConfigFiles/vim/functions/colorcolumn.vim
  map  :call ToggleColorColumn()<cr>
  imap   <Esc>:call ToggleColorColumn()<cr>a

  " call ruby code on the fly
  "source ~/.ConfigFiles/vim/functions/ruby.vim
  map <Leader>re :call Ruby_eval_vsplit()<kEnter>
  map <Leader>ra :execute "% :call Ruby_eval_vsplit()"<kEnter>

  " My own functions for interacting with svn
  "source ~/.ConfigFiles/vim/functions/svn.vim
  map <Leader>st :call StartGitdiff()<kEnter>
  map <Leader>sd :call StartSVNdiff()<kEnter>
  map <Leader>sp :call StartSVNdiffWithPrev()<kEnter>
  map <Leader>sb :call ShowSVNblame()<kEnter>
  map <Leader>sl :call ShowSVNlog()<kEnter>
  map <Leader>ss :call ShowSVNstatus()<kEnter>
  map <Leader>se :call ClosePreviewWindow()<kEnter>

" Execute current line or current selection as shell commands.
nnoremap <Leader>xs yypv:!sh<CR>k
"vnoremap <Leader>xs :!sh<CR>  " This does not seem to work...
" Execute current line or current selection as Vim EX commands.
nnoremap <Leader>xv :exe getline(".")<CR>
vnoremap <Leader>xv :<C-w>exe join(getline("'<","'>"),'<Bar>')<CR>

" toggle highlighting of searched text in normal and insert mode
map <C-H> :set hls!<bar>set hls?<CR>
imap <C-H> <ESC>:set hls!<bar>set hls?<CR>a

" toggle row/column cursors
map  :set cuc!<bar>set cuc?<CR>:set cul!<bar>set cul?<CR>
imap  <ESC>:set cuc!<bar>set cuc?<CR>:set cul!<bar>set cul?<CR>a

" justify in normal and (more importantly) insert mode
map <C-j> {gq}
imap <C-j> <ESC><C-j>i

" go to next error (e.g., after :make)
" not sure if this is a good idea (conflicts with yankring)
" map <C-n> :cnzz
" map <C-p> :cpzz
map <C-N> :cnzz
map <C-P> :cpzz
" definitely not sure if *this* is a good idea
"imap  :cnzz

" Switch current character with next character (teh -> the)
nnoremap <C-s> vxph
imap <C-s> <ESC>l<C-s>i

"}}}
"********************************************************************

"********************************************************************
"       TODO:clean up the rest of this{{{
"********************************************************************

" Run latex on current file OLD AND UNUSED
"com -range=% SW <line1>,<line2>s/\([^,].*\),\(.*\)/\2,\1/g
"com L execute '!latex '.bufname("%")
"" Run xdvi on current file's .dvi output
"com K execute '!xdvi '.strpart(bufname("%"),0,strlen(bufname("%"))-4).'.dvi'
"" Run ke
"com M execute '!make'
"com R execute '!./run'

"function MyVsplit( ... )
   "let g:oldColumnCount = &columns
   "let &columns = g:oldColumnCount*2
   "silent execute "vsplit ".a:1
"endfunction
"command! -nargs=? Vsplit silent call MyVsplit(<f-args>)

function MyVsplit()
   let &columns = &columns * 2
   silent execute "vsplit"
endfunction
command! Vsplit silent call MyVsplit()

" function WordCount()
"   let s:old_status = v:statusmsg
"   exe "silent normal g\<c-g>"
"   let s:word_count = str2nr(split(v:statusmsg)[11])
"   let v:statusmsg = s:old_status
"   return s:word_count
" endfunction



" func! HideAll()
"   syn region myFold start="{" end="}" transparent fold
"   syn sync fromstart
"   set foldnestmax=1
"   set foldmethod=syntax
" endfunc
" amenu Whatever.Hide\ all :call HideAll()<CR>

" :syn region myFold start="{" end="}" transparent fold
" :syn sync fromstart
" :set foldmethod=syntax
" " :map <C-a> za

" :syn region Comment start="/\*" end="\*/" fold

" TODO: clean this up

" restores last cursor position in a file?
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

"inoremap <expr> <C-n> pumvisible() ? '<C-n>' : '<C-n><C-r>=pumvisible() ? "\<Down>" : ""<CR>'
"inoremap <expr> <M-,> pumvisible() ? '<C-n>' : '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<Down>" : ""<CR>'

function! TogglePreviewWindowInCompleteOpt()
   if stridx( &completeopt, "preview" ) == -1
      set completeopt+=preview
   else
      set completeopt-=preview
      pc
   endif
   return ""
endfunction
inoremap ,d <C-R>=TogglePreviewWindowInCompleteOpt()<CR>
inoremap <expr> <C-S> pumvisible() ? "\<C-R>=TogglePreviewWindowInCompleteOpt()<CR><C-n><C-p>" : "\<C-S>"

" context specific tab behavior
function! CleverTab()
  if pumvisible()
    return "\<C-N>"
  else
    return "\<Tab>"
  endif
  " use tab to start omnicomplete if appropriate
  "if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
    "return "\<Tab>"
  "elseif exists('&omnifunc') && &omnifunc != ''
    "return "\<C-X>\<C-O>"
  "else
    "return "\<C-N>"
  "endif
endfunction
inoremap <Tab> <C-R>=CleverTab()<CR>

" if completing, enter selects (instead of entering a CR)
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" if completing, esc cancels (and closes preview window) instead of selecting
" Not sure how I feel about this... turns out I'm pretty used to esc selecting
" inoremap <expr> <Esc> pumvisible() ? "\<C-e>\<Esc>\<C-w>\<C-z>a" : "\<Esc>"


if has('gui_running') " gvim specific options
set tw=0
" start with row/column cursor on
" Nope, conflicts with color/syntax
"set cuc " column
"set cul " row

" window size:
"set lines=40

" scroll bar at the left rather than the right:
set guioptions-=r
"set guioptions+=l

" no menu, and no toolbar:
set guioptions-=m
set guioptions-=T
"set guifont=Inconsolata\ 11 " need patched fonts for airline

" have a small-ish yet readable font:
" set guifont=*fixed*medium*semicondensed*120*iso8859-1*

" have error messages red on white (rather than t'tother way round,
" which isn't readable in the above font):
highlight ErrorMsg guibg=White guifg=Red

" Set window title
"  Old way, much simpler
" let myhost = substitute(hostname(), "\\..*", "", "")
" if myhost == "waterloo"
"    let myhost = "localhost"
" endif
" "autocmd BufEnter * let &titlestring = "gvim ".expand("%:p:~")." on ".myhost
" "  New way, too crufty for little gain...
" fun SetTitle()
"    let myhost = substitute(hostname(), "\\..*", "", "")
"    if myhost == "waterloo"
"       let myhost = "localhost"
"    endif
"    let myfile = expand("%:p:~")
"    if myfile == ""
"       let myfile = substitute(getcwd(), "/home/dana/", "~/", "")."/?"
"    endif
"    let &titlestring = "gvim ".myfile." on ".myhost
" endfun
" autocmd BufEnter * call SetTitle()
"
" if &term == "screen"
"         autocmd BufEnter * let &titlestring = "SCREEN: gvim ".expand("%:p:~")." on ".myhost
" endif
" if &term == "xterm" || &term == "vt220" || &term == "screen"
"         set title
"         set t_ts=
" endif

" :hi LineNr guifg=darkcyan guibg=darkblue
else
endif
"}}}
"********************************************************************

"set guioptions-=r  " scroll bar on right, always shown
set relativenumber

" Let's give this a shot...
inoremap jk <Esc> 
" noremap j jzz  " Maybe scrolloff is better?
" noremap k kzz  " Maybe scrolloff is better?

function! NumberToggle()
  if(&relativenumber == 1 && &number == 1)
    set nonumber
    set norelativenumber
  elseif (&number == 1)
    set relativenumber
  else
      set number
  endif
endfunc

function! NumberLineMode(mode)
    if (&relativenumber == 1 || &number == 1)
        if (a:mode == 1)
            set number
            set norelativenumber
        else
            set number
            set relativenumber
        endif
    endif
endfunction

nnoremap <C-n> :call NumberToggle()<cr>

au FocusLost * call NumberLineMode(1)
au FocusGained * call NumberLineMode(2)

au InsertEnter * call NumberLineMode(1)
au InsertLeave * call NumberLineMode(2)
